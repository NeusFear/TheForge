Users:
- name: website pass: Eu72pGF2Sd
Databases:
- name: website pass: Mc2g33463! pass_from_website_user: Eu72pGF2Sd

###############################
# CSS:
###############################

Light theme with sharp corners and clean modern look, no media shown on home pages, only descriptions

Homepage:
	+ top bar with login and user's name
	+ tabs with pages:
		- Home
		- News
		- Forums (active)
		- Community
		- Profile

Forum post preview information:
	+ Profile picture of poster
	+ name of poster
	+ Title of post
	+ description of post

Profile Preview: (ttp)
	+ Profile Picture
	+ Status
	+ Username
	+ Nickname
	+ Tags

Profile Page:
	+ I need to draw pictures for these I think...

###############################
# File sorting:
###############################

JSON BASED (not prefered, everything has to be stored in the http folder.)
	/forums
		/index.php
		/topics
			/category.php
			/category/posts
				/title.json
		/media
			/userdata
				/userID
					/avatar.png
					
					#these will need to happen when we get a storage database (implement them, but don't allow acess yet)
					/banner.png
					/uploads
						/file.ext



DATABASE (prefered)
	/forums
		/index.php
		/media/userdata/<user>/ #These filepaths will be indexed with a database, nothing is stored in the database, when we get a hosted system then we will store this on a seperate drive, however only file paths will be stored in a database, for purpose of speed in indexing only, and to avoid the need of the machine to index things, a direct path is better
			avatar.png
			banner.png
			/uploads/
				<any upload>
	
	User Storage:
		- Users are stored in the website database on the 'forumusers' table
		rows sorted like this:
			userindex username email password recieve_updates(bool) firstname lastname location discordid status join_date profile_image_path banner_path profile_home_html xp staff_roles(string seperated by ',' split on parse) donator_roles(string seperated by ',' split on parse) other_roles(string seperated by ',' split on parse)
			
	Forums Storage: 
		- web pages are stored in the website databse on the 'forumposts' table
		rows sorted like this:
			post_index date_posted date_modified(changed on post_update and replyaddition) userid posthtml type(pinned[staff] important[staff] help[users] normal[users]) category responses(likes,dislikes)[split on parse] html_content 
			
		
	Reply Storage:
		- replys are stored in the website databased in the 'forumreplies' table
		rows sorted like this:
			respective_post_index date_posted userid post_html




###############################

Things to Research:
	- Filestorage efficiency - index with database, execute from a filesystem
	- userstorage - database
	- forums storage - database

###############################
# Core Functions needed:
###############################

getRecentPosts(string query, int ammt) :: array of post indexes query'd by (query argument):
	- returns forum posts
		+ query (date_modified date_posted[aka new] likes[most likes] tag_{any tag type[split on parse at '_']})
		+ ammount (number of querys to display[clear loded querys on 'load_more' and re-show them with new argument]) (default: 10)
getUsers(string status, string group, int ammount)
	- returns online users:
		+ status (onilne, offline, all)
		+ group (any tag)
		+ ammount (integer for number of returned users)
getPostData(int index)
	- returns an object of the data of the post, (see mysql data for returned data)
getPostResponses(int ammt)
	- returns array of comments on the post, in time order (see mysql storage for returnable data)
getUserData(int: userid)
	- returns all data about the user (see mysql storage)
