function getUUID(player: text) :: text:
	return {pd.playerdata::%{_player}%::uuid}


function playerdata(uuid: text, action: text = "get", type: text = "profile", atr: text = "username", mod: text = "", mod2: text = "") :: texts:
	if {_action} is "get":
		set {_json} to line 1 in file "../_playerdata/%{_type}%/%{_uuid}%.json"
		copy json {_json} to {_playerdata::*}
		if {_atr} is "ips" or "usernames" or "ranks" or "infractions":
			return {_playerdata::%{_atr}%::*}
			stop
		return {_playerdata::%{_atr}%}
	if {_action} is "modify":
		set {_json} to line 1 in file "../_playerdata/%{_type}%/%{_uuid}%.json"
		copy json {_json} to {_playerdata::*}
		if {_type} is "profile":
			if {_atr} is "usernames" or "ips" or "addrank":
				if {_atr} is "addrank":
					set {_atr} to "ranks"
				add {_mod} to {_playerdata::%{_atr}%::*}
				set {_newjson} to "%json form of {_playerdata::*}%"
				set line 1 in file "../_playerdata/%{_type}%/%{_uuid}%.json" to {_newjson}
				stop
			if {_atr} is "removerank":
				if {_atr} is "removerank": #this is future-proofing if I need to add more arguments above this
					set {_atr} to "ranks"
				remove {_mod} from {_playerdata::%{_atr}%::*}
				set {_newjson} to "%json form of {_playerdata::*}%"
				set line 1 in file "../_playerdata/%{_type}%/%{_uuid}%.json" to {_newjson}
				stop
			set {_playerdata::%{_atr}%} to {_mod}
			set {_newjson} to "%json form of {_playerdata::*}%"
			set line 1 in file "../_playerdata/%{_type}%/%{_uuid}%.json" to {_newjson}
			stop
		if {_type} is "infractions":
			if {_atr} is "add":
				add {_mod} to {_playerdata::infractions::*}
				set {_newjson} to "%json form of {_playerdata::*}%"
				set line 1 in file "../_playerdata/%{_type}%/%{_uuid}%.json" to {_newjson}
				stop
			if {_atr} is "remove":
				set {_playerdata::infractions::%{_mod}%} to {_mod2}
				set {_newjson} to "%json form of {_playerdata::*}%"
				set line 1 in file "../_playerdata/%{_type}%/%{_uuid}%.json" to {_newjson}
				stop
		if {_type} is "statistics":
			set {_playerdata::%{_atr}%} to {_mod}
			set {_newjson} to "%json form of {_playerdata::*}%"
			set line 1 in file "../_playerdata/%{_type}%/%{_uuid}%.json" to {_newjson}
			stop
		if {_type} contains "discord":
			set {_playerdata::%{_atr}%} to {_mod}
			set {_newjson} to "%json form of {_playerdata::*}%"
			set line 1 in file "../_playerdata/%{_type}%/%{_uuid}%.json" to {_newjson}
			stop



function getPlayer(uuid: text) :: text:
	set {_player::*} to playerdata("%{_uuid}%")
	return {_player::1}

function fromDiscord(id: text) :: text:
	return "%{gd.general::discord::users::%{_id}%}%"

function toDiscord(uuid: text) :: text:
	set {_id::*} to playerdata("%{_uuid}%" , "get" , "profile" , "discord")
	return {_id::1}

function stringtolist(string: text) :: texts:
	replace all " and " with ", " in {_string}
	set {_list::*} to {_string} split at ", "
	return {_list::*}

function hasJoined(p: text) :: boolean:
	set {_uuid} to getUUID("%{_p}%")
	if file "../_playerdata/profile/%{_uuid}%.json" exists:
		return true
	else:
		return false

function packetJson(text: text) :: jsonobject:
	set {_t::*} to {_text} split by ""
	loop {_t::*}:
		if loop-value = """":
			set {_t::%loop-index%} to "\"""
		else if loop-value = "\":
			if {_t::%loop-index parsed as int + 1%} != "n":
				set {_t::%loop-index%} to "\\"
	set {_text} to join {_t::*} by ""
	if {_json} isn't set:
		set {_json} to "{""text"":""%{_text}%"""
	else:
		set {_json} to "%{_json}%,{""text"":""%{_text}%"""
	return json of string "{""extra"":[%{_json}%}],""text"":""""}"

#function message(s: string, p: players):
#	set {_p} to new play_server_chat packet
#	set "chatcomponent" pjson 0 of {_p} to json of string jsonFormat({_s})
#	loop {_p::*}:
#		send loop-value packet {_p}

function title(players: players, title: string, subtitle: string, stay: int, fadein: int, fadeout: int):
	set {_reset} to new play_server_title packet
	set "TitleAction" penum 0 of {_reset} to "RESET"
	loop "" and "SUB":
		set {_%loop-value%titlepacket} to new play_server_title packet
		set "chatcomponent" pjson 0 of {_%loop-value%titlepacket} to packetJson({_%loop-value%title})
		set "TitleAction" penum 0 of {_%loop-value%titlepacket} to "%loop-value%TITLE"
	set {_timepacket} to new play_server_title packet
	set "TitleAction" penum 0 of {_timepacket} to "TIMES"
	set int pnum 0 of {_timepacket} to {_fadein}
	set int pnum 1 of {_timepacket} to {_stay}
	set int pnum 2 of {_timepacket} to {_fadeout}
	loop {_players::*}:
		send loop-value packet {_reset}
		send loop-value packet {_timepacket}
		send loop-value packet {_subtitlepacket}
		send loop-value packet {_titlepacket}

function actionbar(player: players, text: text, stay: int, fadein: int, fadeout: int):
	set {_reset} to new play_server_title packet
	set "TitleAction" penum 0 of {_reset} to "RESET"
	set {_actionpacket} to new play_server_title packet
	set "TitleAction" penum 0 of {_actionpacket} to "ACTIONBAR"
	set "chatcomponent" pjson 0 of {_actionpacket} to packetJson({_text})
	set {_timepacket} to new play_server_title packet
	set "TitleAction" penum 0 of {_timepacket} to "TIMES"
	set int pnum 0 of {_timepacket} to {_fadein}
	set int pnum 1 of {_timepacket} to {_stay}
	set int pnum 2 of {_timepacket} to {_fadeout}
	loop {_players::*}:
		send loop-value packet {_reset}
		send loop-value packet {_timepacket}
		send loop-value packet {_actionpacket}

function updatePlayernames(player: text):
	set {_uuid} to uuid of {_player}
	set {_username::*} to playerdata("%{_uuid}%")
	if {_username::1} is not {_player}:
		playerdata("%{_uuid}%" , "modify" , "profile" , "username" , "%{_player}%")
		playerdata("%{_uuid}%" , "modify" , "profile" , "usernames" , "%{_player}%")

function updateIPAddress(player: player):
	set {_uuid} to getUUID("%{_player}%")
	set {_ip} to {_player}'s ip
	set {_saved::*} to playerdata("%{_uuid}%" , "get" , "profile" , "ip")
	if "%{_saved::1}%" is not "%{_ip}%":
		playerdata("%{_uuid}%" , "modify" , "profile" , "ip" , "%{_ip}%")
		playerdata("%{_uuid}%" , "modify" , "profile" , "ips" , "%{_ip}%")
		set {pd.ip::%{_ip}%} to {_uuid}

function updatePlayer(player: player):
	set {_uuid} to uuid of {_player}
	set {pd.playerdata::%{_player}%::uuid} to {_uuid}

	if hasJoined("%{_player}%") is false:
		create file "../_playerdata/profile/%{_uuid}%.json"
		write "" at line 1 to file "../_playerdata/profile/%{_uuid}%.json"
		create file "../_playerdata/statistics/%{_uuid}%.json"
		write "" at line 1 to file "../_playerdata/statistics/%{_uuid}%.json"
		create file "../_playerdata/infractions/%{_uuid}%.json"
		write "" at line 1 to file "../_playerdata/infractions/%{_uuid}%.json"
		playerdata("%{_uuid}%" , "modify" , "profile" , "firstjoin" , "%now%")
		playerdata("%{_uuid}%" , "modify" , "profile" , "seen" , "%now%")
		playerdata("%{_uuid}%" , "modify" , "profile" , "lastserver" , "lobby")
		playerdata("%{_uuid}%" , "modify" , "statistics" , "playtime" , "0")
		playerdata("%{_uuid}%" , "modify" , "profile" , "username" , "%{_player}%")

	updateIPAddress({_player})
	updatePlayernames("%{_player}%")

function timespan(second: integer) :: string:
	set {_yeart} to ""
	set {_montht} to ""
	set {_weekt} to ""
	set {_dayt} to ""
	set {_hourst} to ""
	set {_mint} to ""

	loop ({_second} / 31536000) times:
		if {_year} > 50:
			stop
		remove 31536000 from {_second}
		add 1 to {_year}
	loop ({_second} / 2592000) times:
		remove 2592000 from {_second}
		add 1 to {_month}
	loop ({_second} / 604800) times:
		remove 604800 from {_second}
		add 1 to {_week}
	loop ({_second} / 86400) times:
		remove 86400 from {_second}
		add 1 to {_day}
	loop ({_second} / 3600) times:
		remove 3600 from {_second}
		add 1 to {_hours}
	loop ({_second} / 60) times:
		remove 60 from {_second}
		add 1 to {_min}

	if {_year} > 0:
		set {_yeart} to "&f%{_year}% &7Years, "
	if {_month} > 0:
		set {_montht} to "&f%{_month}%&7 Months, "
	if {_week} > 0:
		set {_weekt} to "&f%{_week}%&7 Weeks, "
	if {_day} > 0:
		set {_dayt} to "&f%{_day}%&7 Days, "
	if {_hours} > 0:
		set {_hourst} to "&f%{_hours}%&7 Hours, "
	if {_min} > 0:
		set {_mint} to "&f%{_min}%&7 Minutes, "
	if {_second} > 0:
		set {_secondt} to "&f%{_second}%&7 Seconds."
	else:
		set {_secondt} to "&f%{_second}%&7 Seconds."


	return "%{_yeart}%%{_montht}%%{_weekt}%%{_dayt}%%{_hourst}%%{_mint}%%{_secondt}%"
	
function getprice(type: text , item: text) :: number:
	$thread
	set {_price} to skutil yaml value "%{_type}%.%{_item}%" from file "pricelist.yml" #this needs to be created in a data file
	return {_price}
	

function getIP(player: text , history: text = "none") :: texts:
	set {_uuid} to getUUID("%{_player}%")
	if {_history} is "none":
		return playerdata("%{_uuid}%" , "get" , "profile" , "ips")
	else:
		set {_ip::*} to playerdata("%{_uuid}%" , "get" , "profile" , "ip")
		return {_ip::1}

function rank(uuid: text, action: text = "get", rank: text = "highest", atr: text = "none") :: text:
	set {_savedranks::*} to playerdata("%{_uuid}%" , "get" , "profile" , "ranks")
	if {_action} is "is":
		set {_ranks} to "%{_savedranks::*}%"
		if {_atr} is "+":
			add "admin" to {_tracks::*}
			add "developer" to {_tracks::*}
			add "moderator" to {_tracks::*}
			add "builder" to {_tracks::*}
			add "legend" to {_tracks::*}
			add "royal" to {_tracks::*}
			add "paladin" to {_tracks::*}
			add "hero" to {_tracks::*}
			add "noble" to {_tracks::*}
			add "member" to {_tracks::*}
			loop {_tracks::*}:
				if {_ranks} contains "%loop-value%":
					set {_atleast} to "true"
					if "%loop-value%" is "%{_rank}%":
						return "true"
						stop
				if {_atleast} is set:
					if "%loop-value%" is "%{_rank}%":
						return "true"
						stop
		if {_atr} is "none":
			if {_ranks} contains "%{_rank}%":
				return "true"
				stop
		return "false"
	if {_action} is "get":
		set {_savedranks::*} to playerdata("%{_uuid}%" , "get" , "profile" , "ranks")
		set {_highest} to "%{_savedranks::*}%"
		if {_rank} is "highest":
			if {_highest} contains "owner":
				return "owner"
				stop
			if {_highest} contains "admin":
				return "admin"
				stop
			if {_highest} contains "developer":
				return "developer"
				stop
			if {_highest} contains "moderator":
				return "moderator"
				stop
			if {_highest} contains "builder":
				return "builder"
				stop
			if {_highest} contains "legend":
				return "legend"
				stop
			if {_highest} contains "royal":
				return "royal"
				stop
			if {_highest} contains "paladin":
				return "paladin"
				stop
			if {_highest} contains "hero":
				return "hero"
				stop
			if {_highest} contains "noble":
				return "noble"
				stop
			if {_highest} contains "member":
				return "member"
				stop
			return "guest"
		if {_rank} is "staff":
			if {_highest} contains "owner":
				return "owner"
				stop
			if {_highest} contains "admin":
				return "admin"
				stop
			if {_highest} contains "developer":
				return "developer"
				stop
			if {_highest} contains "moderator":
				return "moderator"
				stop
			return "none"
		if {_rank} is "donor":
			if {_highest} contains "legend":
				return "legend"
				stop
			if {_highest} contains "royal":
				return "royal"
				stop
			if {_highest} contains "paladin":
				return "paladin"
				stop
			if {_highest} contains "hero":
				return "hero"
				stop
			if {_highest} contains "noble":
				return "noble"
				stop
			return "none"
		if {_rank} is "all":
			set {_ranks::*} to playerdata("%{_uuid}%" , "get" , "profile" , "ranks")
			return "%{_ranks::*}%"
	if {_action} is "add":
		if {_rank} is "all":
			stop
		set {_savedranks::*} to playerdata("%{_uuid}%" , "get" , "profile" , "ranks")
		set {_ranks} to "%{_savedranks::*}%"
		if {_ranks} contains {_rank}:
#			if {pd.playerdata::%{_uuid}%::discord::user} is set:
#				give role {_rank} to user {pd.playerdata::%{_uuid}%::discord::user} in guild "327100409850101760" with bot "TheForge"
			stop
		else:
			playerdata("%{_uuid}%" , "modify" , "profile" , "addrank" , "%{_rank}%")
#			give role {_rank} to user {pd.playerdata::%{_uuid}%::discord::user} in guild "327100409850101760" with bot "TheForge"
	if {_action} is "remove":
		if {_rank} is "all":
			stop
		set {_savedranks::*} to playerdata("%{_uuid}%" , "get" , "profile" , "ranks")
		set {_ranks} to "%{_savedranks::*}%"
		if {_ranks} contains {_rank}:
			playerdata("%{_uuid}%" , "modify" , "profile" , "removerank" , "%{_rank}%")
#			remove role {_rank} from user {pd.playerdata::%{_uuid}%::discord::user} in guild "327100409850101760" with bot "TheForge"

function prefix(rank: text) :: text:
	set {_owner} to "&7«&4Owner&7»&4"
	set {_admin} to "&7«&4Admin&7»&4"
	set {_developer} to "&7«&5Dev&7»&5"
	set {_moderator} to "&7«&cMod&7»&c"
	set {_builder} to "&7«&9Builder&7»&9"
	set {_legend} to "&7«&6Legend&7»&6"
	set {_royal} to "&7«&bRoyal&7»&b"
	set {_paladin} to "&7«&dPaladin&7»&d"
	set {_hero} to "&7«&2Hero&7»&2"
	set {_noble} to "&7«&3Noble&7»&3"
	set {_member} to "&7«&fMember&7»&f"
	set {_guest} to "&7«&fGuest&7»&f"
	return {_%{_rank}%}

function rankMsg(rank: text , and: text , text: text):
	set {_prefix} to prefix("%{_rank}%")
	loop all players:
		set {_uuid} to uuid of loop-player
		if {_and} is "+":
			if rank("%{_uuid}%" , "is" , "%{_rank}%" , "+") is "true":
				send "&8* %{_prefix}% &f: &7%{_text}%" to loop-player
		if {_and} is "none":
			if rank("%{_uuid}%" , "is" , "%{_rank}%") is "true":
				send "&8* %{_prefix}% &f: &7%{_text}%" to loop-player

function isWhitelisted(player: text) :: boolean:
	set {_uuid} to getUUID("%{_player}%")
	loop {cd.whitelist::white::perm::*}:
		if "%{_uuid}%" is "%loop-value%":
			return true
			stop
	loop {cd.whitelist::white::temp::*}:
		if "%{_player}%" is "%loop-value%":
			remove {_player} from {cd.whitelist::white::temp::*}
			add {_uuid} to  {cd.whitelist::white::perm::*}
			return true
			stop
	return false

function isGraylisted(player: text) :: boolean:
	set {_uuid} to getUUID("%{_player}%")
	loop {cd.whitelist::gray::perm::*}:
		if "%{_uuid}%" is "%loop-value%":
			return true
			stop
	loop {cd.whitelist::gray::temp::*}:
		if "%{_player}%" is "%loop-value%":
			remove {_player} from {cd.whitelist::gray::temp::*}
			add {_uuid} to  {cd.whitelist::gray::perm::*}
			return true
			stop
	return false

function statistics(player: text , stat: text , action: text , ammount: integer = 1) :: text:
	set {_uuid} to getUUID("%{_player}%")
	if {_stat} is "joins" or "join":
		if {_action} is "add":
			set {_joins::*} to playerdata("%{_uuid}%" , "get" , "statistics" , "joins")
			playerdata("%{_uuid}%" , "modify" , "statistics" , "joins" , "%{_joins::1} parsed as integer + 1%")
		if {_action} is "get":
			set {_joins::*} to playerdata("%{_uuid}%" , "get" , "statistics" , "joins")
			return "%{_joins::1}%"

function progress(length: integer , complete: integer , total: integer , color1: text , color2: text) :: text:
	set {_return} to ""
	loop {_length} times:
		if ({_complete} / {_total}) >= (loop-number / {_length}):
			set {_return} to "%{_return}%%{_color1}%-"
		else:
			set {_return} to "%{_return}%%{_color2}%-"
	return {_return}

options:
	disrespectwarnings: 5
	advertisementwarnings: 3
	chatwarnings: 10
	moddingwarnings: 2
	sensitivitywarnings: 3
	securitywarnings: 1

	disrespectexplination: Includes racism, political garbage, and any other general disrespect
	advertisementexplination: Any link/ip/channel that isnt our own
	chatexplination: Includes spam, improper use of colors, etc.
	moddingexplination: Using hacked clients or other mods that give the user an advantage over other users
	sensitivityexplination: includes excessive language, nudity, or other types of suggestion
	securityexplination: Anythign that threatens the security to the server or it's community

function infractions(action: text , player: text , type: text , enforcer: text = "not set", sendto: text = "console") :: text:
	set {_uuid} to getUUID({_player})
	set {_euuid} to getUUID({_enforcer})
	if {_action} is "get":
		if {_type} is "total":
			set {_total} to 0
			set {_ln} to 1
			set {_infractions::*} to playerdata("%{_uuid}%" , "get" , "infractions" , "infractions")
			loop {_infractions::*}:
				if {_infractions::%{_ln}%} does not contain "pardoned":
					add 1 to {_total}
				add 1 to {_ln}
			return "%{_total}%"
		if {_type} is "send":
			set {_infractions::*} to playerdata("%{_uuid}%" , "get" , "infractions" , "infractions")
			set {_index} to 1

			set {_enforcerstextdisrespect} to "No Punishments Recieved"
			set {_enforcerstextadvertisement} to "No Punishments Recieved"
			set {_enforcerstextchat} to "No Punishments Recieved"
			set {_enforcerstextmodding} to "No Punishments Recieved"
			set {_enforcerstextsensitivity} to "No Punishments Recieved"
			set {_enforcerstextsecurity} to "No Punishments Recieved"

			set {_ifneededdisrespect} to ""
			set {_ifneededadvertisement} to ""
			set {_ifneededchat} to ""
			set {_ifneededmodding} to ""
			set {_ifneededsensitivity} to ""
			set {_ifneededsecurity} to ""

			set {_ifneeded%{_type}%} to ""
			set {_enforcers%{_type}%} to ""
			loop {_infractions::*}:
				set {_split::*} to loop-value split at " : "
				set {_type} to {_split::1}
				set {_enforcer} to {_split::2}
				set {_when} to {_split::3}
				if {_type} is "pardoned":
					add 1 to {_pardoned}
					add 1 to {_pardoned%{_type}%}
				else:
					add "&8(%{_index}%) &7Given by: &f%{_enforcer}%&7 on &f%{_when}%" to {_%{_type}%::*}
					set {_enforcerstext%{_type}%} to "Enforcers:"
					set {_ifneeded%{_type}%} to "[?]"
					set {_enforcer} to getPlayer("%{_enforcer}%")
					if {_enforcers%{_type}%} is not set:
						set {_enforcers%{_type}%} to "&5Enforcers:"
					set {_enforcers%{_type}%} to "%{_enforcers%{_type}%}%%nl%&8(%{_index}%) &f%{_enforcer}% &7on &f%{_when}%"
				add 1 to {_index}

			set {_disrespect} to "%size of {_disrespect::*}%" parsed as integer
			set {_advertisement} to "%size of {_advertisement::*}%" parsed as integer
			set {_chat} to "%size of {_chat::*}%" parsed as integer
			set {_modding} to "%size of {_modding::*}%" parsed as integer
			set {_sensitivity} to "%size of {_sensitivity::*}%" parsed as integer
			set {_security} to "%size of {_security::*}%" parsed as integer

			set {_disrespectprogress} to progress(5 , {_disrespect} , {@disrespectwarnings} , "&c&m" , "&8")
			set {_advertisementprogress} to progress(5 , {_advertisement} , {@advertisementwarnings} , "&c&m" , "&8")
			set {_chatprogress} to progress(5 , {_chat} , {@chatwarnings} , "&c&m" , "&8")
			set {_moddingprogress} to progress(5 , {_modding} , {@moddingwarnings} , "&c&m" , "&8")
			set {_sensitivityprogress} to progress(5 , {_sensitivity} , {@sensitivitywarnings} , "&c&m" , "&8")
			set {_securityprogress} to progress(5 , {_security} , {@securitywarnings} , "&c&m" , "&8")

			json("%{_sendto}%" , "&7- Disrespect:   ||ttp:{@disrespectexplination}||%{_disrespectprogress}%||ttp:&7%{_disrespect} - {_pardoneddisrespect}% &f/ &7{@disrespectwarnings}|| &f: &7%{_enforcerstextdisrespect}%|| &5%{_ifneededdisrespect}%||ttp:%{_enforcersdisrespect}%")
			json("%{_sendto}%" , "&7- Ads:            ||ttp:{@advertisementexplination}||%{_advertisementprogress}%||ttp:&7%{_advertisement} - {_pardonedadvertisement}% &f/ &7{@advertisementwarnings}|| &f: &7%{_enforcerstextadvertisement}%|| &5%{_ifneededadvertisement}%||ttp:%{_enforcersadvertisement}%")
			json("%{_sendto}%" , "&7- Chat:           ||ttp:{@chatexplination}||%{_chatprogress}%||ttp:&7%{_chat} - {_pardonedchat}% &f/ &7{@chatwarnings}|| &f: &7%{_enforcerstextchat}%|| &5%{_ifneededchat}%||ttp:%{_enforcerschat}%")
			json("%{_sendto}%" , "&7- Modding:       ||ttp:{@moddingexplination}||%{_moddingprogress}%||ttp:&7%{_modding} - {_pardonedmodding}% &f/ &7{@moddingwarnings}|| &f: &7%{_enforcerstextmodding}%|| &5%{_ifneededmodding}%||ttp:%{_enforcersmodding}%")
			json("%{_sendto}%" , "&7- Sensitivity:    ||ttp:{@sensitivityexplination}||%{_sensitivityprogress}%||ttp:&7%{_sensitivity} - {_pardonedsensitivity}% &f/ &7{@sensitivitywarnings}|| &f: &7%{_enforcerstextsensitivity}%|| &5%{_ifneededsensitivity}%||ttp:%{_enforcerssensitivity}%")
			json("%{_sendto}%" , "&7- Security:      ||ttp:{@securityexplination}||%{_securityprogress}%||ttp:&7%{_security} - {_pardonedsecurity}% &f/ &7{@securitywarnings}|| &f: &7%{_enforcerstextsecurity}%|| &5%{_ifneededsecurity}%||ttp:%{_enforcerssecurity}%")


	if {_action} is "add" or "apply":
		playerdata("%{_uuid}%" , "modify" , "infractions" , "add" , "%{_type}% : %{_euuid}% : %now%")
	if {_action} is "remove" or "revoke" or "delete":
		playerdata("%{_uuid}%" , "modify" , "infractions" , "remove" , "%{_type}%" , "pardoned : %{_enforcer}%")

function joinMsg(p: text):
	set {_uuid} to getUUID("%{_p}%")
	set {_rank} to rank("%{_uuid}%" , "get" , "highest")
	set {_prefix} to prefix("%{_rank}%")
	loop all players:
		if rank("%uuid of loop-player%" , "is" , "moderator" , "+") is "true":
			set {_infractions} to infractions("get" , "%{_p}%" , "total")
			send "&a* %{_prefix}%%{_p}% &7Joined &6The Forge&7 with &f%{_infractions}% &7Infractions" to loop-player
		else:
			send "&a* %{_prefix}%%{_p}% &7Joined &6The Forge&f." to loop-player
	send "&a* %{_prefix}%%{_p}% &7Joined &6The Forge&f." to the console

function playerJoin(p: player):
	set {_uuid} to uuid of {_p}
	if {cd.whitelist} is true:
		if isWhitelisted("%{_p}%") is false:
			if isGraylisted("%{_p}%") is false:
				wait 20 ticks
				kick {_p} due to "&7[&6The Forge&7] %nl%&fThis is SkyForge's Developer Server%nl%&fYou're not whitelisted nor graylisted"
				rankMsg("moderator" , "+" , "%{_p}% was kicked from the server, because they're not whitelisted")
				stop
			else:
				loop all players:
					if rank("%uuid of loop-player%" , "is" , "admin") is "true":
						joinMsg("%{_p}%")
						wait a second
						updatePlayer({_p})
						statistics("%{_p}%" , "join" , "add")
						send sucessMsg("You were allowed into the server because you're on a greylist and an &4Administrator &ais Online") to {_p}
						stop
				wait 20 ticks
				kick {_p} due to "&7[&6The Forge&7] %nl%&fThis is SkyForge's Developer Server%nl%&fYou're not allowed unless an &4Administrator&f is online."
				rankMsg("moderator" , "+" , "%{_p}% was kicked from the server, because there are no Admins online")
				stop
	joinMsg("%{_p}%")
	wait a second
	updatePlayer({_p})
	statistics("%{_p}%" , "join" , "add")

function playerLeave(p: player):
	set {_uuid} to getUUID("%{_p}%")
	if {cd.whitelist} is true:
		if isWhitelisted("%{_p}%") is false:
			if isGraylisted("%{_p}%") is false:
				stop
	set {_rank} to rank("%{_uuid}%" , "get" , "highest")
	set {_prefix} to prefix("%{_rank}%")
	broadcast "&4* %{_prefix}%%{_p}% &7Left &6The Forge&f."

function errorMsg(t: text) :: text:
	set {_msg} to "&7[&6The Forge&7] &c%{_t}%"
	return {_msg}
function warnMsg(t: text) :: text:
	set {_msg} to "&7[&6The Forge&7] &7%{_t}%"
	return {_msg}
function sucessMsg(t: text) :: text:
	set {_msg} to "&7[&6The Forge&7] &a%{_t}%"
	return {_msg}
function infoMsg(t: text) :: text:
	set {_msg} to "&7[&6The Forge&7] &b%{_t}%"
	return {_msg}

function pTab(header: text, footer: text, player: player):
	add packetJson({_header}) and packetJson({_footer}) to {_header and footer::*}
	set {_packet} to new play_server_player_list_header_footer packet
	loop 2 times:
		set "chatcomponent" pjson (loop-num - 1) of {_packet} to {_header and footer::%loop-num%}
	send {_player} packet {_packet}

function randomChar(arg: integer = 1) :: text:
	set {_chars} to "abcdefghijklmnopqrstuvwxyz1234567890"
	set {_chars::*} to {_chars} split at ""
	loop {_arg} times:
		set {_char} to a random element out of {_chars::*}
		add {_char} to {_return::*}
	set {_return} to "%join {_return::*} with """"%"
	return {_return}
